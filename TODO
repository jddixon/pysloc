# ~/dev/py/pysloc/TODO

2016-06-15
    * files matched by patterns in .gitignore (such as waf*) are 
        counted but are not counted if the pattern follows -X
        in the command line

2016-06-09
    * pySloc needs -P and -G options
    * need to handle 'top' eLang (just don't set -L !)                  * DONE 
    * need to handle 'ghp' eLang (just use 'html' instead !)            * DONE

2016-05-31
    * get rid of "file does not exist: " messages                       * DONE
    * "WARNING: no main language (-L) ..." also undesirable             * OK -v

2016-05-22
    * pySloc fails to count userguide.xml, which begins with an			* FIXED
        XML declaration line followed by 			                    * FIXED
     <document> <header> ... </header>...<body>...</body></document>	* FIXED
    * See discussion in pysloc/__init__.py 			                    * FIXED

2016-05-21
    * BUG: options.mainLang is sometimes '' at line 87 pySloc and       * FIXED
        so pySloc tries to read "projCfg." which does not exist         * FIXED

2016-05-19
    * options.already is set in many places but never used; if really   * IT IS
        unused, drop it                                                 *  USED

2016-05-05
    * edit countLinesXml() so that line6 in comments for Xml
        is counted as a separate line (ie, is indeed line 6)

2016-04-11, edited from -09
    * change .langMap to add visibility middle column                   * DONE
        - so line is LANG:VISIBILITY:REL_PATH                           * YEP
        - file:X:WHATEVER ignored for now
            * becomes glob as in -X glob/NA
2016-04-08
    * add null counter
    * introduce 'dat' pseudo-language meaning "text data"
        - if on command line uses code counter, otherwise ignored

2016-03-09 (edited from -02)
    PREPROCESSED FORTRAN
    * upper case extensions need to be be preprocessed by 
        C preprocessor (.F, .F90, perhaps others)

2016-03-04
    * command line summary (-h output) in README is out of date
    * README should make it clear that -X exclusions are regular
        eapressions

2016-03-03
    * RMarkdown counts should *include* inline R expressions

2016-03-03
    * add cobol;  cob (cbl, COB) extensions
        - if column 1 (begins sequence area) is asterisk or 
            non-printing char < SPACE, treat as comment
        - if column 7 (indicator area) is asterisk or '/', treat as 
            comment
        - a dash in the indicator continues the line                    * SKIP
        - pre-Cobol 2002, ignore all but positions 7-72
        - Cobol 2002 ignores *> and anything after it
        - supportline.microfocus.com/documentation/books/nx40/lrintr.htm
            is example

2016-03-02 (edited from -01-16)
    * filters protobuf-generated files from line counts; and test		
        - ruby
        - ocaml
        - haskell

2016-02-07
    * YAML counting not quite right: need whitespace between sharp
        sign and precding token, if any

2016-02-05
    * add support for YAML 
        - # MUST be preceded by whitespace
        - # inside string is ignored
        - *.Rmd of course contain YAML ...
        - yyFoo.yaml should include eg Wikipedia YAML sample

2016-02-02
    * py: consider modifying pySloc to consider triple-DQUOTEd strings
        that are not assigned to a variable to be comments
        - so """this would be a comment"""
        - but this = """ would be counted as source code"""

    * it would be only reasonable to look at the first line of files
        without an extension for sha-bang lines like #!/bin/bash
        - could also look at the permissions bit on the file

2016-01-24
    * in eg xlreg_py testData is NOT covered by an exclusion (-X)
        but files are not being counted: investigate
    * xlreg_py: which sudden drop of roughly 300 SLOC ?

2016-01-23
    * in upax_go, cmd/ and subdirectories are ignored unless eg
        cmd/upaxMirror/upaxMirror.go is added to command line;
        should be found automatically

2016-01-14
    * must examine effects of for line continuation character
        (backslash at EOL)
        - C
        - python
    
    * for a list of such tools [code generators] see
        https://en.wikipedia. rg/wiki/Comparison_of_parser_generators

2016-01-04
    * need to test for pathological cases, like Scala or Java
        file beginning with */

2015-12-01
    * need some testing for C++ other than that in testQ.py

2015-11-28 (edited from -09-03)
    * support PHP comments
        - single line: comment starts with # or //
        - multi-line: C-style /* like this */
        - comments preceded by sharp sign (#)
        - see php.net/manual/en/language.basic.syntax.comments.php
            * 'The "one-line" comment styles only comment to the end
                of the line or the current block of PHP code,
                whichever comes first.'
            * C-style comments (/* ... */) may not be nested
    * map .php extension to php programming language
    * write testPHPComments.py to exercise commentsForPHP (21 lines,
        6 of which SLOC)

2015-08-12
    * Html handling needs improvement, specifically an HTML comment
        should be <!-- (.*) --> where the middle bit excludes -- and >
    * countLinesJavaStyle() should be reworked to use uncommentJava()

2015-04-29
    * grand total line contains no test information (compare
        goSloc, which has two such lines, first source, then test)

2015-04-22
    * FIX: XML processing is remarkably inefficient
        - and needs more testing

2015-04-13 (edited from -11)
    * add countLinesGeneric which has a pattern or regexp for whatever
        starts a comment line

2015-04-08
    * figure out how to differentiate C *.h from C++ *.h
    * write commentsForJava and testJavaComments
    * write commentsForC and testCComments
    * write commentsForCPlusPlus and testCPlusPlusComments

2015-04-07
    * FIX: fusegen count includes lang None with a count of zero
    * FIX: markdown counts are dominated by html:6927/6695; dunno
        where the test counts come from!
    * FIX: xxxfs counts are from autogen.sh and ltmain.sh; nothing
        for *.c, *.h -- ie
        - we need to ignore library and generated shell code
        - we need to count Makefiles, *.ac, *.am
        - but ignore Makefile.in, other generated files
        - and we need to count C code
            * ah but in this case (a) *.inc and (b) all *.c/h is
                generated code
    * FIX: notCodeDir() is not being used
    * commentsForOcaml needs to be longer

2015-04-06 (edited from -03)
    * uncomment
        TQUOTE = '"""'
        in commentsForPy and get testPyComments.py working

2015-04-04
    * countLinesGeneric, countLinesPython should honor the line
        continuation character (backslash at end of line) - but
        how exactly?

2015-04-01 [from snosloc/TODO]
    * add ext2lang, map guessing language from file extension
        - one language is 'notCode'
    * add notCodeFiles set, list of file names which don't contain code
        (COPYING, README and such)
    * add command line option -L/--languges for csv list of languages
        (abbrev) to be counted; default = count all
    * integrate [snoSloc into] existing pySloc
    * output is langCount, a map, abbrev->(LOC, SLOC, TSLOC), where
        TSLOC is SLOC for tests
    * assume can use the same counter for Java and Go
    * the perils of Perl: www.perlmonks.org/?node_id=100344

2015-02-16
    * handle pathological cases
        - SQUOTEd TQUOTE: '"""' or 'like """ this'

