# ~/dev/py/pysloc/TODO

2016-03-03
    * note that continuation characters can be used to create what
        amounts to a block comment

2016-03-03 (from -02-10)
    * most common use of *.m is probably with Objective C
    * add support for Objective C as objc
        - if objc is mainLang count *.h and *.m as objc

2016-03-03
    * add ada; -- comments, *.adb or *.ads for extensions
    * add awk; # comments, *.awk
    * add cobol;  cob (cbl, COB) extensions
        - if column 1 (begins sequence area) is asterisk or 
            non-printing char < SPACE, treat as comment
        - if column 7 (indicator area) is asterisk or '/', treat as 
            comment
        - a dash in the indicator continues the line
        - pre-Cobol 2002, ignore all but positions 7-72
        - Cobol 2002 ignores *> and anything after it
        - supportline.microfocus.com/documentation/books/nx40/lrintr.htm
            is example
    * lisp: comments start with semicolon or M-;
        - *.el Emacs Lisp
        - *.lisp
    * sed: # comments
    * tcl ('tickle'): file extension is .tcl
        - # begins comment if it appears where command expected

2016-03-02
    HANDLE for and f90 SEPARATELY
    * fortran comments have C or c in the first column
    * continuation lines have a character in position 6
        - conventionally '+' 
        - alternative convention is '&' in column 73 and then in
            column 6 thereafter
        - no tabs may precede column 6
    * source code starts in column 7 or after the first tab
    * columns 73-80 are ignored
    * some compilers allow BANG ('!') anywhere but positions
        6 as a comment marker
        - specifically allowed by Fortran 90
    * spaces are simply ignored in fixed format, significant in 
        free format code
    * .f and .for for fixed-format source code
    * .f90 [, .f95, .f03, .f08, .f15, ...] for free-format source code
    * upper case extensions need to be be preprocessed by 
        C preprocessor (.F, .F90, perhaps others)


2016-03-02 (edited from -01-16)
    * filters protobuf-generated files from line counts; and test		
        - ruby
        - ocaml
        - haskell

2016-02-08 (edited from -02)
    * add support for perl  (*.pl, *.pm), comments begin with #         * DONE
    * treat as multiline comments blocks beginning with ^=pod and       * DONE
        ending with ^=cut                                               * DONE
    * also multiline comments beginning with '^= for comment' and       * DONE
        ending with ^=cut                                               * DONE

2016-02-07
    * YAML counting not quite right: need whitespace between sharp
        sign and precding token, if any

2016-02-05
    * add support for YAML 
        - comments follow #, extend to end of line)                     * DONE
        - # MUST be preceded by whitespace
        - # inside string is ignored
        - *.Rmd of course contain YAML ...
        - yyFoo.yaml should include eg Wikipedia YAML sample

2016-02-02
    * py: consider modifying pySloc to consider triple-DQUOTEd strings
        that are not assigned to a variable to be comments
        - so """this would be a comment"""
        - but this = """ would be counted as source code"""

    * it would be only reasonable to look at the first line of files
        without an extension for sha-bang lines like #!/bin/bash
        - could also look at the permissions bit on the file

2016-01-24
    * in eg xlreg_py testData is NOT covered by an exclusion (-X)
        but files are not being counted: investigate
    * xlreg_py: which sudden drop of roughly 300 SLOC ?

2016-01-23
    * in upax_go, cmd/ and subdirectories are ignored unless eg
        cmd/upaxMirror/upaxMirror.go is added to command line;
        should be found automatically

2016-01-14
    * must examine effects of for line continuation character
        (backslash at EOL)
        - C
        - python
    
    * for a list of such tools [code generators] see
        https://en.wikipedia. rg/wiki/Comparison_of_parser_generators

2016-01-04
    * need to test for pathological cases, like Scala or Java
        file beginning with */

2015-12-01
    * need some testing for C++ other than that in testQ.py

2015-11-28 (edited from -09-03)
    * support PHP comments
        - single line: comment starts with # or //
        - multi-line: C-style /* like this */
        - comments preceded by sharp sign (#)
        - see php.net/manual/en/language.basic.syntax.comments.php
            * 'The "one-line" comment styles only comment to the end
                of the line or the current block of PHP code,
                whichever comes first.'
            * C-style comments (/* ... */) may not be nested
    * map .php extension to php programming language
    * write testPHPComments.py to exercise commentsForPHP (21 lines,
        6 of which SLOC)

2015-08-12
    * Html handling needs improvement, specifically an HTML comment
        should be <!-- (.*) --> where the middle bit excludes -- and >
    * countLinesJavaStyle() should be reworked to use uncommentJava()

2015-04-29
    * grand total line contains no test information (compare
        goSloc, which has two such lines, first source, then test)

2015-04-22
    * FIX: XML processing is remarkably inefficient
        - and needs more testing

2015-04-13 (edited from -11)
    * add countLinesGeneric which has a pattern or regexp for whatever
        starts a comment line

2015-04-08
    * figure out how to differentiate C *.h from C++ *.h
    * write commentsForJava and testJavaComments
    * write commentsForC and testCComments
    * write commentsForCPlusPlus and testCPlusPlusComments

2015-04-07
    * FIX: fusegen count includes lang None with a count of zero
    * FIX: markdown counts are dominated by html:6927/6695; dunno
        where the test counts come from!
    * FIX: xxxfs counts are from autogen.sh and ltmain.sh; nothing
        for *.c, *.h -- ie
        - we need to ignore library and generated shell code
        - we need to count Makefiles, *.ac, *.am
        - but ignore Makefile.in, other generated files
        - and we need to count C code
            * ah but in this case (a) *.inc and (b) all *.c/h is
                generated code
    * FIX: notCodeDir() is not being used
    * commentsForOcaml needs to be longer

2015-04-06 (edited from -03)
    * uncomment
        TQUOTE = '"""'
        in commentsForPy and get testPyComments.py working

2015-04-04
    * countLinesGeneric, countLinesPython should honor the line
        continuation character (backslash at end of line) - but
        how exactly?

2015-04-01 [from snosloc/TODO]
    * add ext2lang, map guessing language from file extension
        - one language is 'notCode'
    * add notCodeFiles set, list of file names which don't contain code
        (COPYING, README and such)
    * add command line option -L/--languges for csv list of languages
        (abbrev) to be counted; default = count all
    * integrate [snoSloc into] existing pySloc
    * output is langCount, a map, abbrev->(LOC, SLOC, TSLOC), where
        TSLOC is SLOC for tests
    * assume can use the same counter for Java and Go
    * the perils of Perl: www.perlmonks.org/?node_id=100344

2015-02-16
    * handle pathological cases
        - SQUOTEd TQUOTE: '"""' or 'like """ this'

