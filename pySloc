#!/usr/bin/python3

# pySloc, part of pysloc

import os, re, sys, time
from stat       import *

from argparse   import ArgumentParser
from merkletree import MerkleDoc
from pysloc     import *

def doCount(options):

    # get and check options; XXX should throw exceptions if problems 
    # are encountered
   
    exclusions      = options.exclusions
    exRE            = options.exRE
    justShow        = options.justShow
    mainLang        = options.mainLang
    matches         = options.matches
    namedFiles      = options.namedFiles
    q               = options.q
    showTimestamp   = options.showTimestamp
    showVersion     = options.showVersion
    timestamp       = options.timestamp
    verbose         = options.verbose

    lines   = 0
    sloc    = 0
    options.already = set() # an unordered collection, not a dictionary

    # if a file is named on the command line, we always count it.
    for name in namedFiles:
        lang = None
        if (exRE is not None) and (exRE.search(name) is not None):
            if verbose:
                print("skipping %s: excluded" % name)
            continue
        # a file name may be prefixed with the short name of a language
        a, b, c = name.partition(':')
        if b == ':':
            lang, name = a, c

        if os.path.exists(name):
            l,s = 0,0
            if os.path.isfile(name):
                counter = None
                if lang == None:
                    lang = q.guessLang(name, True)  # isCLIArg
                if lang != None:
                    counter = q.getCounter(name, options)
                if counter == None:
                    counter = countLinesGeneric
                l,s = counter(name, options)
            
            elif os.path.isdir(name):
                # XXX EXCLUDE SOME DIRS
                l,s = countLinesInDir(name, options)
            else:
                print("? don't know how to count %s" % name)
            lines += l
            sloc  += s
        else:
            print("file does not exist: %s" % name)

    print("total of %5d lines of code, of which %5d source" % (lines, sloc))

# MAIN ##############################################################
if __name__ == '__main__':
   
    # INTERPRET COMMAND LINE ----------------------------------------
    parser = ArgumentParser('count lines of source code')

    parser.add_argument('-j', '--justShow',     action='store_true',
        help = 'list options and exit')
    parser.add_argument('-L', '--mainLang',     type=str,
        help = 'main language expected (short name, optional)')
    parser.add_argument('-M', '--matches',      type=str,
        help = 'count ONLY files with matching names')
    parser.add_argument('-t', '--showTimestamp',action='store_true',
        help = 'output UTC timestamp to command line')
    parser.add_argument('-v', '--verbose',      action='store_true',
        help = 'whether the program is chatty')
    parser.add_argument('-V', '--showVersion',  action='store_true',
        help = 'show version information')
    parser.add_argument('-X', '--exclusions',   type=str,
        help = 'do not count files/directories with matching names')

    parser.add_argument('namedFiles', nargs='*',
        help = 'any number of namedFiles and/or directories to scan')
    args = parser.parse_args()

    args.q          = Q()
    args.timestamp  = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # fixups --------------------------------------------------------
    if args.exclusions:
        # XXX for now, just handle a single exclusion
        args.exRE = re.compile(args.exclusions)
    else:
        args.exRE = None
    
    if not '.' in args.namedFiles:
        args.namedFiles += '.'
    if not args.justShow:
        if len(args.namedFiles) == 0:
            print("you need to provide some file names")
            parser.print_help()
            sys.exit(0)

    if not args.mainLang:
        args.mainLang = ''
    elif args.mainLang != '':
        h = args.q.getCounter(args.mainLang)
        if h == None:
            print("'%s' is not the short name of a supported language" % 
                args.mainLang)
            parser.print_help();
            sys.exit(1)

    # sanity checks -------------------------------------------------

    # chatter -------------------------------------------------------
    if args.justShow or args.verbose:
        
        print("exclusions:      %s" % args.exclusions)
        print("mainLang:        %s" % args.mainLang)
        print("matches:         %s" % args.matches)
        print("showTimestamp:   %s" % args.showTimestamp)
        print("timestamp:       %s" % args.timestamp)
        print("verbose:         %s" % args.verbose)
        print("version:         %s %s" % (__version__, __version_date__))

        print("namedFiles:")
        for file in args.namedFiles:
            print("    %s" % file)

    # do it ---------------------------------------------------------
    if not args.justShow:
        doCount(args)
