#!/usr/bin/python3
# pySloc, part of pysloc

""" Count the number of lines of source code in a file or directory. """

import os
import sys
import time
from argparse import ArgumentParser

from optionz import dump_options
from xlattice.util import make_ex_re, get_exclusions

from pysloc import(__version__, __version_date__,
                   count_lines_in_dir, count_lines_not_sharp, CountHolder, MapHolder)


def read_file_map(path_to_file, named_files):
    """
    Read and interpret project configuration file.

    Read a file, stripping off comments beginning with sharp signs ('#')
    and dropping blank lines.  What remains should look like
    LANG:VISIBILITY:REL_PATH.  For the moment we ignore pseudo-languages
    'file' and 'dir' and the visibility column.
    """
    with open(path_to_file, 'rb') as flattened:
        data = flattened.read().decode('utf-8')
    if data:
        lines = data.split('\n')
        if lines[-1] == '':
            lines = lines[:-1]
        for line in lines:
            # get rid of comments
            line, _, _ = line.partition('#')
            line = line.strip()
            if line:
                parts = line.split(':')
                if len(parts) == 3:
                    # line is well-formed, by a crude standard
                    e_lang, _, rel_path = parts

                    item = e_lang + ':' + rel_path
                    # DEBUG
                    # print("adding '%s' to named file list" % item)
                    # END
                    named_files.append(item)
                else:
                    print("%s: can't interpret '%s'" % (path_to_file, line))


def do_count(options):
    """
    Get and check options; XXX should throw exceptions if problems
    are encountered
    """

    # exclusions = options.exclusions
    ex_re = options.ex_re
    k__ = options.k__
    proj_cfg = options.proj_cfg           # this defaults to projCfg.local
    langs_counted = options.langs_counted
    main_lang = options.main_lang
    # matches = options.matches
    named_files = options.named_files
    only_named_files = options.only_named_files
    map_holder = options.map_holder
    # show_version = options.show_version
    # sum_sloc = options.sum_sloc
    # timestamp = options.timestamp
    verbose = options.verbose

    lines = 0
    sloc = 0

    options.already = set()  # an unordered collection, not a dictionary

    # NAMED FILES ---------------------------------------------------

    # source 1: the command line --------------------------

    # At this point namedFiles contains those files named on the command
    # line.  We always count these.

    # source 2: .dvcz/projCfg.local -----------------------

    if proj_cfg and os.path.exists(proj_cfg):
        read_file_map(options.proj_cfg, named_files)

    # source 3: /var/app/sharedev/config/projCfg ----------

    config_dir = os.path.join(os.environ['DVCZ_DIR'], 'config')
    std_files = os.path.join(config_dir, 'projCfg')
    if std_files and os.path.exists(std_files):
        read_file_map(std_files, named_files)
    # DEBUG
    else:
        print("%s does not exist" % std_files)
    # END

    # source 4: /var/app/sharedev/config/projCfg.LANG -----

    if main_lang:
        std_files_for_lang = os.path.join(config_dir, 'projCfg.' + main_lang)
        if std_files_for_lang and os.path.exists(std_files_for_lang):
            read_file_map(std_files_for_lang, named_files)
        else:
            print("WARNING: %s does not exist" % std_files_for_lang)
    else:
        if verbose:
            print("WARNING: no main language (-L) has been defined")

    # END NAMED FILES -----------------------------------------------

    for name in named_files:
        lang, is_test = None, False
        if (ex_re is not None) and (ex_re.search(name) is not None):
            if verbose > 1:
                print("skipping %s: excluded" % name)
            continue

        # DEBUG
        #print("CLI ARG IS FILE: '%s'" % name)
        # END

        # a file name may be prefixed with the short name of a language
        lang_, delim, file_name_ = name.partition(':')
        if delim == ':':
            lang, name = lang_, file_name_

        if os.path.exists(name):
            loc_, sloc_ = 0, 0
            if os.path.isfile(name):
                counter = None
                if lang is None:
                    lang, is_test = map_holder.guess_lang('./', name,
                                                          is_cli_arg=True, verbose=options.verbose)
                if (lang is not None) and (lang in langs_counted):
                    counter = map_holder.get_counter(lang, is_cli_arg=True)
                if counter is None:
                    counter = count_lines_not_sharp
                loc_, sloc_ = counter(name, options, lang)
                if lang == 'Rmd':
                    if is_test:
                        k__.add_test_counts('R', loc_, sloc_)
                    else:
                        k__.add_counts('R', loc_, sloc_)
                else:
                    if is_test:
                        k__.add_test_counts(lang, loc_, sloc_)
                    else:
                        k__.add_counts(lang, loc_, sloc_)

            elif os.path.isdir(name):
                # XXX EXCLUDE SOME DIRS
                loc_, sloc_ = count_lines_in_dir(name, options)
            else:
                print("? don't know how to count %s" % name)
            lines += loc_
            sloc += sloc_
        # else:
        #   print("file does not exist: %s" % name)

    # handle the current directory
    if not only_named_files:
        loc_, sloc_ = count_lines_in_dir('.', options)
        lines = lines + loc_
        sloc = sloc + sloc_

    k__.pretty_break_down()
    print("total of %5d lines of code, of which %5d source" % (lines, sloc))


# MAIN ##############################################################

def main():
    """ Collect options then process files. """

    desc = 'count lines of source code'
    parser = ArgumentParser(description=desc)

    parser.add_argument('-C', '--langs_counted', nargs='?', const='all',
                        help='colon-separated list of langugages to be counted (abbrev)')
    parser.add_argument('-c', '--proj_cfg', default='.dvcz/projCfg.local',
                        help='file containing language/filename pairs')
    parser.add_argument('-j', '--just_show', action='store_true',
                        help='list options and exit')
    parser.add_argument('-L', '--main_lang', type=str,
                        help='main language expected (short name, optional)')
    parser.add_argument('-M', '--matches', type=str,
                        help='count ONLY files with matching names')
    parser.add_argument('-q', '--quiet', action='count', default=0,
                        help='be quiet (overrides -v if later')
    parser.add_argument('-S', '--sum_sloc', action='store_true',
                        help='total up SLOC counts')
    parser.add_argument('-t', '--showTimestamp', action='store_true',
                        help='output UTC timestamp to command line')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='make me more chatty')
    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version information')
    parser.add_argument('-X', '--exclusions', action='append',
                        help='do not count files/directories with matching names')
    parser.add_argument('-z', '--only_named_files', action='store_true',
                        help='only count files named on the command line')

    parser.add_argument('named_files', nargs='*',
                        help='any number of namedFiles and/or directories to scan')
    args = parser.parse_args()

    args.k__ = CountHolder()   # a map, lang => (lines, sloc, tlines, tsloc)
    if args.main_lang:
        args.map_holder = MapHolder(args.main_lang)
    else:
        args.map_holder = MapHolder('')
    args.timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # fixups --------------------------------------------------------
    if os.path.exists('.gitignore'):
        args.globs = get_exclusions('./', '.gitignore')
    else:
        args.globs = []

    if args.exclusions:
        args.globs += args.exclusions
    args.ex_re = make_ex_re(args.globs)

    if args.quiet:
        args.verbose = 0

    if not args.main_lang:
        args.main_lang = ''

    if args.main_lang != '':
        if args.main_lang == 'octave':
            args.main_lang = 'matlab'
        counter_ = args.map_holder.get_counter(args.main_lang)
        if counter_ is None:
            print("'%s' is not the short name of a supported language" %
                  args.main_lang)
            parser.print_help()
            sys.exit(1)

    lang_set = args.map_holder.get_lang_set()    # names of all languages (abbrev)
    if not args.langs_counted or args.langs_counted == 'all':
        args.langs_counted = lang_set
    else:
        lang_list = []
        selected = args.langs_counted.split(':')
        for x__ in selected:
            if x__ in lang_set:
                lang_list.append(x__)
            else:
                print("%s is not recognized as a language abbreviation", x__)
                parser.print_usage()
                sys.exit(1)
        args.langs_counted = frozenset(lang_list)    # in place

    # sanity checks -------------------------------------------------

    # chatter -------------------------------------------------------
    if args.show_version:
        print('pySloc v%s %s' % (__version__, __version_date__))
        sys.exit()
    if args.just_show or (args.verbose > 1):
        print(dump_options(args))

    # do it ---------------------------------------------------------
    if not args.just_show:
        do_count(args)


if __name__ == '__main__':
    main()
